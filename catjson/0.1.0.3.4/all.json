[
  {
    "comments": "A quantity of mosaics in [absolute units](/concepts/mosaic.html#divisibility).\nIt can only be positive or zero. Negative quantities must be indicated by other means (See for example MosaicSupplyChangeTransaction and MosaicSupplyChangeAction).",
    "name": "Amount",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "A time lapse, expressed in number of blocks.",
    "name": "BlockDuration",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Multiplier applied to the size of a transaction to obtain its fee, in [absolute units](/concepts/mosaic.html#divisibility).\nSee the [fees documentation](/concepts/fees.html).",
    "name": "BlockFeeMultiplier",
    "signedness": "unsigned",
    "size": 4,
    "type": "byte"
  },
  {
    "comments": "How hard it was to harvest this block.\nThe initial value is 1e14 and it will remain like this as long as blocks are generated every `blockGenerationTargetTime` seconds ([network property](/guides/network/configuring-network-properties.html)).\nIf blocks start taking more or less time than the configured value, the difficulty will be adjusted (in the range of 1e13 to 1e15) to try to hit the target time.\nSee the [Technical Reference](/symbol-technicalref/main.pdf) section 8.1.",
    "name": "Difficulty",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Index of a [finalization](/concepts/block.html#finalization) epoch.\nThe first epoch is number 1 and contains only the first block (the [Nemesis](/concepts/block.html#block-creation) block). Epoch duration (in blocks) is defined by the `votingSetGrouping` network property.",
    "name": "FinalizationEpoch",
    "signedness": "unsigned",
    "size": 4,
    "type": "byte"
  },
  {
    "comments": "A particular point in time inside a [finalization](/concepts/block.html#finalization) epoch.\nSee the [Technical Reference](/symbol-technicalref/main.pdf) section 15.2.",
    "name": "FinalizationPoint",
    "signedness": "unsigned",
    "size": 4,
    "type": "byte"
  },
  {
    "comments": "Index of a block in the blockchain.\nThe first block (the [Nemesis](/concepts/block.html#block-creation) block) has height 1 and each subsequent block increases height by 1.",
    "name": "Height",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "[Importance score](/concepts/consensus-algorithm.html#importance-score) for an account.\nSee also ImportanceHeight and ImportanceSnapshot.",
    "name": "Importance",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Block height at which an Importance was calculated.",
    "name": "ImportanceHeight",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Either a MosaicId or a NamespaceId.\nThe **most**-significant bit of the first byte is 0 for MosaicId's and 1 for NamespaceId's.",
    "name": "UnresolvedMosaicId",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "A [Mosaic](/concepts/mosaic.html) identifier.",
    "name": "MosaicId",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Number of milliseconds elapsed since the creation of the [Nemesis](/concepts/block.html#block-creation) block.\nThe Nemesis block creation time can be found in the `epochAdjustment` field returned by the [/network/properties](/symbol-openapi/v1.0.1/#operation/getNetworkProperties) REST endpoint. This is the number of seconds elapsed since the [UNIX epoch](https://en.wikipedia.org/wiki/Unix_time) and it is always 1615853185 for Symbol's MAINNET.",
    "name": "Timestamp",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Either an Address or a NamespaceId.\nThe **least**-significant bit of the first byte is 0 for Addresses and 1 for NamespaceId's.",
    "name": "UnresolvedAddress",
    "signedness": "unsigned",
    "size": 24,
    "type": "byte"
  },
  {
    "comments": "An [address](/concepts/cryptography.html#address) identifies an account and is derived from its PublicKey.",
    "name": "Address",
    "signedness": "unsigned",
    "size": 24,
    "type": "byte"
  },
  {
    "comments": "A 32-byte (256 bit) hash.\nThe exact algorithm is unspecified as it can change depending on where it is used.",
    "name": "Hash256",
    "signedness": "unsigned",
    "size": 32,
    "type": "byte"
  },
  {
    "comments": "A 64-byte (512 bit) hash.\nThe exact algorithm is unspecified as it can change depending on where it is used.",
    "name": "Hash512",
    "signedness": "unsigned",
    "size": 64,
    "type": "byte"
  },
  {
    "comments": "A 32-byte (256 bit) integer derived from a private key.\nIt serves as the public identifier of the [key pair](/concepts/cryptography.html#key-pair) and can be disseminated widely. It is used to prove that an entity was signed with the paired private key.",
    "name": "PublicKey",
    "signedness": "unsigned",
    "size": 32,
    "type": "byte"
  },
  {
    "comments": "A PublicKey used for voting during the [finalization process](/concepts/block.html#finalization).",
    "name": "VotingPublicKey",
    "signedness": "unsigned",
    "size": 32,
    "type": "byte"
  },
  {
    "comments": "A 64-byte (512 bit) array certifying that the signed data has not been modified.\nSymbol currently uses [Ed25519](https://ed25519.cr.yp.to/) signatures.",
    "name": "Signature",
    "signedness": "unsigned",
    "size": 64,
    "type": "byte"
  },
  {
    "comments": "A quantity of a certain mosaic.",
    "layout": [
      {
        "comments": "Mosaic identifier.",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "Mosaic amount.",
        "name": "amount",
        "type": "Amount"
      }
    ],
    "name": "Mosaic",
    "type": "struct"
  },
  {
    "comments": "A quantity of a certain mosaic, specified either through a MosaicId or an alias.",
    "layout": [
      {
        "comments": "Unresolved mosaic identifier.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Mosaic amount.",
        "name": "amount",
        "type": "Amount"
      }
    ],
    "name": "UnresolvedMosaic",
    "type": "struct"
  },
  {
    "comments": "Link actions.",
    "name": "LinkAction",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Unlink an account.",
        "name": "UNLINK",
        "value": 0
      },
      {
        "comments": "Link an account.",
        "name": "LINK",
        "value": 1
      }
    ]
  },
  {
    "comments": "Enumeration of network types.",
    "name": "NetworkType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Public network.",
        "name": "MAINNET",
        "value": 104
      },
      {
        "comments": "Public test network.",
        "name": "TESTNET",
        "value": 152
      }
    ]
  },
  {
    "comments": "Enumeration of Transaction types",
    "name": "TransactionType",
    "signedness": "unsigned",
    "size": 2,
    "type": "enum",
    "values": [
      {
        "comments": "AccountKeyLinkTransaction",
        "name": "ACCOUNT_KEY_LINK",
        "value": 16716
      },
      {
        "comments": "NodeKeyLinkTransaction",
        "name": "NODE_KEY_LINK",
        "value": 16972
      },
      {
        "comments": "AggregateCompleteTransaction",
        "name": "AGGREGATE_COMPLETE",
        "value": 16705
      },
      {
        "comments": "AggregateBondedTransaction",
        "name": "AGGREGATE_BONDED",
        "value": 16961
      },
      {
        "comments": "VotingKeyLinkTransaction",
        "name": "VOTING_KEY_LINK",
        "value": 16707
      },
      {
        "comments": "VrfKeyLinkTransaction",
        "name": "VRF_KEY_LINK",
        "value": 16963
      },
      {
        "comments": "HashLockTransaction",
        "name": "HASH_LOCK",
        "value": 16712
      },
      {
        "comments": "SecretLockTransaction",
        "name": "SECRET_LOCK",
        "value": 16722
      },
      {
        "comments": "SecretProofTransaction",
        "name": "SECRET_PROOF",
        "value": 16978
      },
      {
        "comments": "AccountMetadataTransaction",
        "name": "ACCOUNT_METADATA",
        "value": 16708
      },
      {
        "comments": "MosaicMetadataTransaction",
        "name": "MOSAIC_METADATA",
        "value": 16964
      },
      {
        "comments": "NamespaceMetadataTransaction",
        "name": "NAMESPACE_METADATA",
        "value": 17220
      },
      {
        "comments": "MosaicDefinitionTransaction",
        "name": "MOSAIC_DEFINITION",
        "value": 16717
      },
      {
        "comments": "MosaicSupplyChangeTransaction",
        "name": "MOSAIC_SUPPLY_CHANGE",
        "value": 16973
      },
      {
        "comments": "MosaicSupplyRevocationTransaction",
        "name": "MOSAIC_SUPPLY_REVOCATION",
        "value": 17229
      },
      {
        "comments": "MultisigAccountModificationTransaction",
        "name": "MULTISIG_ACCOUNT_MODIFICATION",
        "value": 16725
      },
      {
        "comments": "AddressAliasTransaction",
        "name": "ADDRESS_ALIAS",
        "value": 16974
      },
      {
        "comments": "MosaicAliasTransaction",
        "name": "MOSAIC_ALIAS",
        "value": 17230
      },
      {
        "comments": "NamespaceRegistrationTransaction",
        "name": "NAMESPACE_REGISTRATION",
        "value": 16718
      },
      {
        "comments": "AccountAddressRestrictionTransaction",
        "name": "ACCOUNT_ADDRESS_RESTRICTION",
        "value": 16720
      },
      {
        "comments": "AccountMosaicRestrictionTransaction",
        "name": "ACCOUNT_MOSAIC_RESTRICTION",
        "value": 16976
      },
      {
        "comments": "AccountOperationRestrictionTransaction",
        "name": "ACCOUNT_OPERATION_RESTRICTION",
        "value": 17232
      },
      {
        "comments": "MosaicAddressRestrictionTransaction",
        "name": "MOSAIC_ADDRESS_RESTRICTION",
        "value": 16977
      },
      {
        "comments": "MosaicGlobalRestrictionTransaction",
        "name": "MOSAIC_GLOBAL_RESTRICTION",
        "value": 16721
      },
      {
        "comments": "TransferTransaction",
        "name": "TRANSFER",
        "value": 16724
      }
    ]
  },
  {
    "comments": "binary layout for a transaction",
    "discriminator": [
      "type"
    ],
    "disposition": "abstract",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      }
    ],
    "name": "Transaction",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "binary layout for an embedded transaction",
    "discriminator": [
      "type"
    ],
    "disposition": "abstract",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      }
    ],
    "name": "EmbeddedTransaction",
    "size": "size",
    "type": "struct"
  },
  {
    "name": "ProofGamma",
    "signedness": "unsigned",
    "size": 32,
    "type": "byte"
  },
  {
    "name": "ProofVerificationHash",
    "signedness": "unsigned",
    "size": 16,
    "type": "byte"
  },
  {
    "name": "ProofScalar",
    "signedness": "unsigned",
    "size": 32,
    "type": "byte"
  },
  {
    "comments": "enumeration of block types",
    "name": "BlockType",
    "signedness": "unsigned",
    "size": 2,
    "type": "enum",
    "values": [
      {
        "comments": "nemesis block",
        "name": "NEMESIS",
        "value": 32835
      },
      {
        "comments": "normal block",
        "name": "NORMAL",
        "value": 33091
      },
      {
        "comments": "importance block",
        "name": "IMPORTANCE",
        "value": 33347
      }
    ]
  },
  {
    "comments": "verfiable random function proof",
    "layout": [
      {
        "comments": "gamma",
        "name": "gamma",
        "type": "ProofGamma"
      },
      {
        "comments": "verification hash",
        "name": "verification_hash",
        "type": "ProofVerificationHash"
      },
      {
        "comments": "scalar",
        "name": "scalar",
        "type": "ProofScalar"
      }
    ],
    "name": "VrfProof",
    "type": "struct"
  },
  {
    "comments": "binary layout for a block",
    "discriminator": [
      "type"
    ],
    "disposition": "abstract",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "BLOCK_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "BLOCK_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "block type",
        "name": "type",
        "type": "BlockType"
      },
      {
        "comments": "block height",
        "name": "height",
        "type": "Height"
      },
      {
        "comments": "number of milliseconds elapsed since creation of nemesis block",
        "name": "timestamp",
        "type": "Timestamp"
      },
      {
        "comments": "block difficulty",
        "name": "difficulty",
        "type": "Difficulty"
      },
      {
        "comments": "generation hash proof",
        "name": "generation_hash_proof",
        "type": "VrfProof"
      },
      {
        "comments": "previous block hash",
        "name": "previous_block_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the transactions in this block",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the receipts generated by this block",
        "name": "receipts_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the global chain state at this block",
        "name": "state_hash",
        "type": "Hash256"
      },
      {
        "comments": "beneficiary address designated by harvester",
        "name": "beneficiary_address",
        "type": "Address"
      },
      {
        "comments": "fee multiplier applied to block transactions",
        "name": "fee_multiplier",
        "type": "BlockFeeMultiplier"
      }
    ],
    "name": "Block",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "binary layout for a nemesis block header",
    "discriminator": [
      "type"
    ],
    "factory_type": "Block",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "BLOCK_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "BLOCK_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "BLOCK_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "BLOCK_TYPE",
        "type": "BlockType",
        "value": "NEMESIS"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "block type",
        "name": "type",
        "type": "BlockType"
      },
      {
        "comments": "block height",
        "name": "height",
        "type": "Height"
      },
      {
        "comments": "number of milliseconds elapsed since creation of nemesis block",
        "name": "timestamp",
        "type": "Timestamp"
      },
      {
        "comments": "block difficulty",
        "name": "difficulty",
        "type": "Difficulty"
      },
      {
        "comments": "generation hash proof",
        "name": "generation_hash_proof",
        "type": "VrfProof"
      },
      {
        "comments": "previous block hash",
        "name": "previous_block_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the transactions in this block",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the receipts generated by this block",
        "name": "receipts_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the global chain state at this block",
        "name": "state_hash",
        "type": "Hash256"
      },
      {
        "comments": "beneficiary address designated by harvester",
        "name": "beneficiary_address",
        "type": "Address"
      },
      {
        "comments": "fee multiplier applied to block transactions",
        "name": "fee_multiplier",
        "type": "BlockFeeMultiplier"
      },
      {
        "comments": "number of voting eligible accounts",
        "name": "voting_eligible_accounts_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "number of harvesting eligible accounts",
        "name": "harvesting_eligible_accounts_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "total balance eligible for voting",
        "name": "total_voting_balance",
        "type": "Amount"
      },
      {
        "comments": "previous importance block hash",
        "name": "previous_importance_block_hash",
        "type": "Hash256"
      },
      {
        "alignment": 8,
        "comments": "variable sized transaction data",
        "disposition": "array fill",
        "is_last_element_padded": false,
        "name": "transactions",
        "size": 0,
        "type": "Transaction"
      }
    ],
    "name": "NemesisBlock",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "binary layout for a normal block header",
    "discriminator": [
      "type"
    ],
    "factory_type": "Block",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "BLOCK_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "BLOCK_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "BLOCK_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "BLOCK_TYPE",
        "type": "BlockType",
        "value": "NORMAL"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "block type",
        "name": "type",
        "type": "BlockType"
      },
      {
        "comments": "block height",
        "name": "height",
        "type": "Height"
      },
      {
        "comments": "number of milliseconds elapsed since creation of nemesis block",
        "name": "timestamp",
        "type": "Timestamp"
      },
      {
        "comments": "block difficulty",
        "name": "difficulty",
        "type": "Difficulty"
      },
      {
        "comments": "generation hash proof",
        "name": "generation_hash_proof",
        "type": "VrfProof"
      },
      {
        "comments": "previous block hash",
        "name": "previous_block_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the transactions in this block",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the receipts generated by this block",
        "name": "receipts_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the global chain state at this block",
        "name": "state_hash",
        "type": "Hash256"
      },
      {
        "comments": "beneficiary address designated by harvester",
        "name": "beneficiary_address",
        "type": "Address"
      },
      {
        "comments": "fee multiplier applied to block transactions",
        "name": "fee_multiplier",
        "type": "BlockFeeMultiplier"
      },
      {
        "comments": "reserved padding to align end of BlockHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "block_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "alignment": 8,
        "comments": "variable sized transaction data",
        "disposition": "array fill",
        "is_last_element_padded": false,
        "name": "transactions",
        "size": 0,
        "type": "Transaction"
      }
    ],
    "name": "NormalBlock",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "binary layout for an importance block header",
    "discriminator": [
      "type"
    ],
    "factory_type": "Block",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "BLOCK_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "BLOCK_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "BLOCK_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "BLOCK_TYPE",
        "type": "BlockType",
        "value": "IMPORTANCE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "block type",
        "name": "type",
        "type": "BlockType"
      },
      {
        "comments": "block height",
        "name": "height",
        "type": "Height"
      },
      {
        "comments": "number of milliseconds elapsed since creation of nemesis block",
        "name": "timestamp",
        "type": "Timestamp"
      },
      {
        "comments": "block difficulty",
        "name": "difficulty",
        "type": "Difficulty"
      },
      {
        "comments": "generation hash proof",
        "name": "generation_hash_proof",
        "type": "VrfProof"
      },
      {
        "comments": "previous block hash",
        "name": "previous_block_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the transactions in this block",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the receipts generated by this block",
        "name": "receipts_hash",
        "type": "Hash256"
      },
      {
        "comments": "hash of the global chain state at this block",
        "name": "state_hash",
        "type": "Hash256"
      },
      {
        "comments": "beneficiary address designated by harvester",
        "name": "beneficiary_address",
        "type": "Address"
      },
      {
        "comments": "fee multiplier applied to block transactions",
        "name": "fee_multiplier",
        "type": "BlockFeeMultiplier"
      },
      {
        "comments": "number of voting eligible accounts",
        "name": "voting_eligible_accounts_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "number of harvesting eligible accounts",
        "name": "harvesting_eligible_accounts_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "total balance eligible for voting",
        "name": "total_voting_balance",
        "type": "Amount"
      },
      {
        "comments": "previous importance block hash",
        "name": "previous_importance_block_hash",
        "type": "Hash256"
      },
      {
        "alignment": 8,
        "comments": "variable sized transaction data",
        "disposition": "array fill",
        "is_last_element_padded": false,
        "name": "transactions",
        "size": 0,
        "type": "Transaction"
      }
    ],
    "name": "ImportanceBlock",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "binary layout for finalization round",
    "layout": [
      {
        "comments": "finalization epoch",
        "name": "epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "finalization point",
        "name": "point",
        "type": "FinalizationPoint"
      }
    ],
    "name": "FinalizationRound",
    "type": "struct"
  },
  {
    "comments": "binary layout for finalized block header",
    "layout": [
      {
        "comments": "finalization round",
        "name": "round",
        "type": "FinalizationRound"
      },
      {
        "comments": "finalization height",
        "name": "height",
        "type": "Height"
      },
      {
        "comments": "finalization hash",
        "name": "hash",
        "type": "Hash256"
      }
    ],
    "name": "FinalizedBlockHeader",
    "type": "struct"
  },
  {
    "comments": "Enumeration of receipt types.",
    "name": "ReceiptType",
    "signedness": "unsigned",
    "size": 2,
    "type": "enum",
    "values": [
      {
        "comments": "Mosaic rental fee receipt.",
        "name": "MOSAIC_RENTAL_FEE",
        "value": 4685
      },
      {
        "comments": "Namespace rental fee receipt.",
        "name": "NAMESPACE_RENTAL_FEE",
        "value": 4942
      },
      {
        "comments": "Harvest fee receipt.",
        "name": "HARVEST_FEE",
        "value": 8515
      },
      {
        "comments": "Hash lock completed receipt.",
        "name": "LOCK_HASH_COMPLETED",
        "value": 8776
      },
      {
        "comments": "Hash lock expired receipt.",
        "name": "LOCK_HASH_EXPIRED",
        "value": 9032
      },
      {
        "comments": "Secret lock completed receipt.",
        "name": "LOCK_SECRET_COMPLETED",
        "value": 8786
      },
      {
        "comments": "Secret lock expired receipt.",
        "name": "LOCK_SECRET_EXPIRED",
        "value": 9042
      },
      {
        "comments": "Hash lock created receipt.",
        "name": "LOCK_HASH_CREATED",
        "value": 12616
      },
      {
        "comments": "Secret lock created receipt.",
        "name": "LOCK_SECRET_CREATED",
        "value": 12626
      },
      {
        "comments": "Mosaic expired receipt.",
        "name": "MOSAIC_EXPIRED",
        "value": 16717
      },
      {
        "comments": "Namespace expired receipt.",
        "name": "NAMESPACE_EXPIRED",
        "value": 16718
      },
      {
        "comments": "Namespace deleted receipt.",
        "name": "NAMESPACE_DELETED",
        "value": 16974
      },
      {
        "comments": "Inflation receipt.",
        "name": "INFLATION",
        "value": 20803
      },
      {
        "comments": "Transaction group receipt.",
        "name": "TRANSACTION_GROUP",
        "value": 57667
      },
      {
        "comments": "Address alias resolution receipt.",
        "name": "ADDRESS_ALIAS_RESOLUTION",
        "value": 61763
      },
      {
        "comments": "Mosaic alias resolution receipt.",
        "name": "MOSAIC_ALIAS_RESOLUTION",
        "value": 62019
      }
    ]
  },
  {
    "comments": "Receipts provide proof for every state change not retrievable from the block.",
    "discriminator": [
      "type"
    ],
    "disposition": "abstract",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      }
    ],
    "name": "Receipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when transaction fees are credited to a block harvester.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "HARVEST_FEE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "HarvestFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Network currency mosaics were created due to [inflation](/concepts/inflation).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "INFLATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Created mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      }
    ],
    "name": "InflationReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when hash lock is created.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_HASH_CREATED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockHashCreatedFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when hash lock is completed.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_HASH_COMPLETED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockHashCompletedFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when hash lock is expired.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_HASH_EXPIRED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockHashExpiredFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when secret lock is created.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_SECRET_CREATED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockSecretCreatedFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when secret lock is completed.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_SECRET_COMPLETED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockSecretCompletedFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when secret lock is expired.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "LOCK_SECRET_EXPIRED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Modified mosaic.",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the affected account.",
        "name": "target_address",
        "type": "Address"
      }
    ],
    "name": "LockSecretExpiredFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when a mosaic expires.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "MOSAIC_EXPIRED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Expiring mosaic id.",
        "name": "artifact_id",
        "type": "MosaicId"
      }
    ],
    "name": "MosaicExpiredReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when a mosaic rental fee is paid.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "MOSAIC_RENTAL_FEE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Transferred mosaic",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the sender account.",
        "name": "sender_address",
        "type": "Address"
      },
      {
        "comments": "Address of the recipient account.",
        "name": "recipient_address",
        "type": "Address"
      }
    ],
    "name": "MosaicRentalFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "name": "NamespaceId",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Enumeration of namespace registration types.",
    "name": "NamespaceRegistrationType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Root namespace.",
        "name": "ROOT",
        "value": 0
      },
      {
        "comments": "Child namespace.",
        "name": "CHILD",
        "value": 1
      }
    ]
  },
  {
    "comments": "Enumeration of alias actions.",
    "name": "AliasAction",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Unlink a namespace, removing the alias.",
        "name": "UNLINK",
        "value": 0
      },
      {
        "comments": "Link a namespace, creating an alias.",
        "name": "LINK",
        "value": 1
      }
    ]
  },
  {
    "comments": "Receipt generated when a [namespace](/concepts/namespace.html) expires.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "NAMESPACE_EXPIRED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Expired namespace identifier.",
        "name": "artifact_id",
        "type": "NamespaceId"
      }
    ],
    "name": "NamespaceExpiredReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when a [namespace](/concepts/namespace.html) is deleted.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "NAMESPACE_DELETED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Deleted namespace identifier.",
        "name": "artifact_id",
        "type": "NamespaceId"
      }
    ],
    "name": "NamespaceDeletedReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Receipt generated when a namespace rental fee is paid.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Receipt",
    "initializers": [
      {
        "target_property_name": "type",
        "value": "RECEIPT_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "RECEIPT_TYPE",
        "type": "ReceiptType",
        "value": "NAMESPACE_RENTAL_FEE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipt version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Type of receipt.",
        "name": "type",
        "type": "ReceiptType"
      },
      {
        "comments": "Transferred mosaic",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "Address of the sender account.",
        "name": "sender_address",
        "type": "Address"
      },
      {
        "comments": "Address of the recipient account.",
        "name": "recipient_address",
        "type": "Address"
      }
    ],
    "name": "NamespaceRentalFeeReceipt",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "The transaction inside the block that triggered the receipt.",
    "layout": [
      {
        "comments": "Transaction primary source (e.g. index within the block).",
        "name": "primary_id",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Transaction secondary source (e.g. index within aggregate).",
        "name": "secondary_id",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      }
    ],
    "name": "ReceiptSource",
    "type": "struct"
  },
  {
    "comments": "Actual Address behind a NamespaceId at the time a transaction was confirmed.",
    "layout": [
      {
        "comments": "Information about the transaction that triggered the receipt.",
        "name": "source",
        "type": "ReceiptSource"
      },
      {
        "comments": "Resolved Address.",
        "name": "resolved_value",
        "type": "Address"
      }
    ],
    "name": "AddressResolutionEntry",
    "type": "struct"
  },
  {
    "comments": "An Address resolution statement links a namespace alias used in a transaction to the real address **at the time of the transaction**.",
    "layout": [
      {
        "comments": "Unresolved address.",
        "name": "unresolved",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Number of resolution entries.",
        "name": "resolution_entries_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Resolution entries.",
        "disposition": "array",
        "name": "resolution_entries",
        "size": "resolution_entries_count",
        "type": "AddressResolutionEntry"
      }
    ],
    "name": "AddressResolutionStatement",
    "type": "struct"
  },
  {
    "comments": "Actual MosaicId behind a NamespaceId at the time a transaction was confirmed.",
    "layout": [
      {
        "comments": "Information about the transaction that triggered the receipt.",
        "name": "source",
        "type": "ReceiptSource"
      },
      {
        "comments": "Resolved MosaicId.",
        "name": "resolved_value",
        "type": "MosaicId"
      }
    ],
    "name": "MosaicResolutionEntry",
    "type": "struct"
  },
  {
    "comments": "A Mosaic resolution statement links a namespace alias used in a transaction to the real mosaic id **at the time of the transaction**.",
    "layout": [
      {
        "comments": "Unresolved mosaic.",
        "name": "unresolved",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Number of resolution entries.",
        "name": "resolution_entries_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Resolution entries.",
        "disposition": "array",
        "name": "resolution_entries",
        "size": "resolution_entries_count",
        "type": "MosaicResolutionEntry"
      }
    ],
    "name": "MosaicResolutionStatement",
    "type": "struct"
  },
  {
    "comments": "Collection of receipts scoped to a single source (transaction or block).",
    "layout": [
      {
        "comments": "Transaction primary source (e.g. index within the block).",
        "name": "primary_id",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Transaction secondary source (e.g. index within aggregate).",
        "name": "secondary_id",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Number of receipts.",
        "name": "receipt_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Receipts.",
        "disposition": "array",
        "name": "receipts",
        "size": "receipt_count",
        "type": "Receipt"
      }
    ],
    "name": "TransactionStatement",
    "type": "struct"
  },
  {
    "comments": "Collection of statements scoped to a block.",
    "layout": [
      {
        "comments": "Number of transaction statements.",
        "name": "transaction_statement_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Transaction statements.",
        "disposition": "array",
        "name": "transaction_statements",
        "size": "transaction_statement_count",
        "type": "TransactionStatement"
      },
      {
        "comments": "Number of address resolution statements.",
        "name": "address_resolution_statement_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Address resolution statements.",
        "disposition": "array",
        "name": "address_resolution_statements",
        "size": "address_resolution_statement_count",
        "type": "AddressResolutionStatement"
      },
      {
        "comments": "Number of mosaic resolution statements.",
        "name": "mosaic_resolution_statement_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Mosaic resolution statements.",
        "disposition": "array",
        "name": "mosaic_resolution_statements",
        "size": "mosaic_resolution_statement_count",
        "type": "MosaicResolutionStatement"
      }
    ],
    "name": "BlockStatement",
    "type": "struct"
  },
  {
    "comments": "enumeration of account types",
    "name": "AccountType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "account is not linked to another account",
        "name": "UNLINKED",
        "value": 0
      },
      {
        "comments": "account is a balance-holding account that is linked to a remote harvester account",
        "name": "MAIN",
        "value": 1
      },
      {
        "comments": "account is a remote harvester account that is linked to a balance-holding account",
        "name": "REMOTE",
        "value": 2
      },
      {
        "comments": "account is a remote harvester eligible account that is unlinked \\note this allows an account that has previously been used as remote to be reused as a remote",
        "name": "REMOTE_UNLINKED",
        "value": 3
      }
    ]
  },
  {
    "comments": "enumeration of account key type flags",
    "is_bitwise": true,
    "name": "AccountKeyTypeFlags",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "unset key",
        "name": "UNSET",
        "value": 0
      },
      {
        "comments": "linked account public key \\note this can be either a remote or main account public key depending on context",
        "name": "LINKED",
        "value": 1
      },
      {
        "comments": "node public key on which remote is allowed to harvest",
        "name": "NODE",
        "value": 2
      },
      {
        "comments": "VRF public key",
        "name": "VRF",
        "value": 4
      }
    ]
  },
  {
    "comments": "enumeration of account state formats",
    "name": "AccountStateFormat",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "regular account",
        "name": "REGULAR",
        "value": 0
      },
      {
        "comments": "high value account eligible to harvest",
        "name": "HIGH_VALUE",
        "value": 1
      }
    ]
  },
  {
    "comments": "pinned voting key",
    "layout": [
      {
        "comments": "voting key",
        "name": "voting_key",
        "type": "VotingPublicKey"
      },
      {
        "comments": "start finalization epoch",
        "name": "start_epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "end finalization epoch",
        "name": "end_epoch",
        "type": "FinalizationEpoch"
      }
    ],
    "name": "PinnedVotingKey",
    "type": "struct"
  },
  {
    "comments": "temporal importance information",
    "layout": [
      {
        "comments": "account importance",
        "name": "importance",
        "type": "Importance"
      },
      {
        "comments": "importance height",
        "name": "height",
        "type": "ImportanceHeight"
      }
    ],
    "name": "ImportanceSnapshot",
    "type": "struct"
  },
  {
    "comments": "account activity bucket",
    "layout": [
      {
        "comments": "activity start height",
        "name": "start_height",
        "type": "ImportanceHeight"
      },
      {
        "comments": "total fees paid by account",
        "name": "total_fees_paid",
        "type": "Amount"
      },
      {
        "comments": "number of times account has been used as a beneficiary",
        "name": "beneficiary_count",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "raw importance score",
        "name": "raw_score",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      }
    ],
    "name": "HeightActivityBucket",
    "type": "struct"
  },
  {
    "comments": "account activity buckets",
    "layout": [
      {
        "comments": "account activity buckets",
        "disposition": "array",
        "name": "buckets",
        "size": 5,
        "type": "HeightActivityBucket"
      }
    ],
    "name": "HeightActivityBuckets",
    "type": "struct"
  },
  {
    "comments": "binary layout for non-historical account state",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "address of account",
        "name": "address",
        "type": "Address"
      },
      {
        "comments": "height at which address has been obtained",
        "name": "address_height",
        "type": "Height"
      },
      {
        "comments": "public key of account",
        "name": "public_key",
        "type": "PublicKey"
      },
      {
        "comments": "height at which public key has been obtained",
        "name": "public_key_height",
        "type": "Height"
      },
      {
        "comments": "type of account",
        "name": "account_type",
        "type": "AccountType"
      },
      {
        "comments": "account format",
        "name": "format",
        "type": "AccountStateFormat"
      },
      {
        "comments": "mask of supplemental public key flags",
        "name": "supplemental_public_keys_mask",
        "type": "AccountKeyTypeFlags"
      },
      {
        "comments": "number of voting public keys",
        "name": "voting_public_keys_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "linked account public key",
        "condition": "supplemental_public_keys_mask",
        "condition_operation": "in",
        "condition_value": "LINKED",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "node public key",
        "condition": "supplemental_public_keys_mask",
        "condition_operation": "in",
        "condition_value": "NODE",
        "name": "node_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "vrf public key",
        "condition": "supplemental_public_keys_mask",
        "condition_operation": "in",
        "condition_value": "VRF",
        "name": "vrf_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "voting public keys",
        "disposition": "array",
        "name": "voting_public_keys",
        "size": "voting_public_keys_count",
        "type": "PinnedVotingKey"
      },
      {
        "comments": "current importance snapshot of the account",
        "condition": "format",
        "condition_operation": "equals",
        "condition_value": "HIGH_VALUE",
        "name": "importance_snapshots",
        "type": "ImportanceSnapshot"
      },
      {
        "comments": "activity buckets of the account",
        "condition": "format",
        "condition_operation": "equals",
        "condition_value": "HIGH_VALUE",
        "name": "activity_buckets",
        "type": "HeightActivityBuckets"
      },
      {
        "comments": "number of total balances (mosaics)",
        "name": "balances_count",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "balances of account",
        "disposition": "array",
        "name": "balances",
        "size": "balances_count",
        "type": "Mosaic"
      }
    ],
    "name": "AccountState",
    "type": "struct"
  },
  {
    "comments": "lock status for lock transaction",
    "name": "LockStatus",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "lock is unused",
        "name": "UNUSED",
        "value": 0
      },
      {
        "comments": "lock was already used",
        "name": "USED",
        "value": 1
      }
    ]
  },
  {
    "comments": "binary layout for hash lock transaction info",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "owner address",
        "name": "owner_address",
        "type": "Address"
      },
      {
        "comments": "mosaic associated with lock",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "height at which the lock expires",
        "name": "end_height",
        "type": "Height"
      },
      {
        "comments": "flag indicating whether or not the lock was already used",
        "name": "status",
        "type": "LockStatus"
      },
      {
        "comments": "hash",
        "name": "hash",
        "type": "Hash256"
      }
    ],
    "name": "HashLockInfo",
    "type": "struct"
  },
  {
    "name": "ScopedMetadataKey",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "enum for the different types of metadata",
    "name": "MetadataType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "account metadata",
        "name": "ACCOUNT",
        "value": 0
      },
      {
        "comments": "mosaic metadata",
        "name": "MOSAIC",
        "value": 1
      },
      {
        "comments": "namespace metadata",
        "name": "NAMESPACE",
        "value": 2
      }
    ]
  },
  {
    "comments": "binary layout of a metadata entry value",
    "layout": [
      {
        "comments": "size of the value",
        "name": "size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "data of the value",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "data",
        "size": "size",
        "type": "byte"
      }
    ],
    "name": "MetadataValue",
    "type": "struct"
  },
  {
    "comments": "binary layout of a metadata entry",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "metadata source address (provider)",
        "name": "source_address",
        "type": "Address"
      },
      {
        "comments": "metadata target address",
        "name": "target_address",
        "type": "Address"
      },
      {
        "comments": "metadata key scoped to source, target and type",
        "name": "scoped_metadata_key",
        "type": "ScopedMetadataKey"
      },
      {
        "comments": "target id",
        "name": "target_id",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "metadata type",
        "name": "metadata_type",
        "type": "MetadataType"
      },
      {
        "comments": "value",
        "name": "value",
        "type": "MetadataValue"
      }
    ],
    "name": "MetadataEntry",
    "type": "struct"
  },
  {
    "name": "MosaicNonce",
    "signedness": "unsigned",
    "size": 4,
    "type": "byte"
  },
  {
    "comments": "Enumeration of mosaic property flags.",
    "is_bitwise": true,
    "name": "MosaicFlags",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "No flags present.",
        "name": "NONE",
        "value": 0
      },
      {
        "comments": "Mosaic supports supply changes through a MosaicSupplyChangeTransaction even when mosaic creator only owns a partial supply.\nIf the mosaic creator owns the totality of the supply, it can be changed even if this flag is not set.",
        "name": "SUPPLY_MUTABLE",
        "value": 1
      },
      {
        "comments": "Mosaic supports TransferTransaction between arbitrary accounts. When not set, this mosaic can only be transferred to or from the mosaic creator.",
        "name": "TRANSFERABLE",
        "value": 2
      },
      {
        "comments": "Mosaic supports custom restrictions configured by the mosaic creator.\nSee MosaicAddressRestrictionTransaction and MosaicGlobalRestrictionTransaction.",
        "name": "RESTRICTABLE",
        "value": 4
      },
      {
        "comments": "Mosaic supports revocation of tokens by the mosaic creator.",
        "name": "REVOKABLE",
        "value": 8
      }
    ]
  },
  {
    "comments": "Enumeration of mosaic supply change actions.",
    "name": "MosaicSupplyChangeAction",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Decreases the supply.",
        "name": "DECREASE",
        "value": 0
      },
      {
        "comments": "Increases the supply.",
        "name": "INCREASE",
        "value": 1
      }
    ]
  },
  {
    "comments": "binary layout for mosaic properties",
    "layout": [
      {
        "comments": "mosaic flags",
        "name": "flags",
        "type": "MosaicFlags"
      },
      {
        "comments": "mosaic divisibility",
        "name": "divisibility",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "mosaic duration",
        "name": "duration",
        "type": "BlockDuration"
      }
    ],
    "name": "MosaicProperties",
    "type": "struct"
  },
  {
    "comments": "binary layout for mosaic definition",
    "layout": [
      {
        "comments": "block height",
        "name": "start_height",
        "type": "Height"
      },
      {
        "comments": "mosaic owner",
        "name": "owner_address",
        "type": "Address"
      },
      {
        "comments": "revision",
        "name": "revision",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "properties",
        "name": "properties",
        "type": "MosaicProperties"
      }
    ],
    "name": "MosaicDefinition",
    "type": "struct"
  },
  {
    "comments": "binary layout for mosaic entry",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "entry id",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "total supply amount",
        "name": "supply",
        "type": "Amount"
      },
      {
        "comments": "definition comprised of entry properties",
        "name": "definition",
        "type": "MosaicDefinition"
      }
    ],
    "name": "MosaicEntry",
    "type": "struct"
  },
  {
    "comments": "binary layout for a multisig entry",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "minimum approval for modifications",
        "name": "min_approval",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "minimum approval for removal",
        "name": "min_removal",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "account address",
        "name": "account_address",
        "type": "Address"
      },
      {
        "comments": "number of cosignatories",
        "name": "cosignatory_addresses_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "cosignatories for account",
        "disposition": "array",
        "name": "cosignatory_addresses",
        "size": "cosignatory_addresses_count",
        "type": "Address"
      },
      {
        "comments": "number of other accounts for which the entry is cosignatory",
        "name": "multisig_addresses_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "accounts for which the entry is cosignatory",
        "disposition": "array",
        "name": "multisig_addresses",
        "size": "multisig_addresses_count",
        "type": "Address"
      }
    ],
    "name": "MultisigEntry",
    "type": "struct"
  },
  {
    "comments": "binary layout for namespace lifetime",
    "layout": [
      {
        "comments": "start height",
        "name": "lifetime_start",
        "type": "Height"
      },
      {
        "comments": "end height",
        "name": "lifetime_end",
        "type": "Height"
      }
    ],
    "name": "NamespaceLifetime",
    "type": "struct"
  },
  {
    "comments": "namespace alias type",
    "name": "NamespaceAliasType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "no alias",
        "name": "NONE",
        "value": 0
      },
      {
        "comments": "if alias is mosaicId",
        "name": "MOSAIC_ID",
        "value": 1
      },
      {
        "comments": "if alias is address",
        "name": "ADDRESS",
        "value": 2
      }
    ]
  },
  {
    "comments": "binary layout for alias",
    "layout": [
      {
        "comments": "namespace alias type",
        "name": "namespace_alias_type",
        "type": "NamespaceAliasType"
      },
      {
        "comments": "mosaic alias",
        "condition": "namespace_alias_type",
        "condition_operation": "equals",
        "condition_value": "MOSAIC_ID",
        "name": "mosaic_alias",
        "type": "MosaicId"
      },
      {
        "comments": "address alias",
        "condition": "namespace_alias_type",
        "condition_operation": "equals",
        "condition_value": "ADDRESS",
        "name": "address_alias",
        "type": "Address"
      }
    ],
    "name": "NamespaceAlias",
    "type": "struct"
  },
  {
    "comments": "binary layout for a namespace path",
    "layout": [
      {
        "comments": "number of paths (excluding root id)",
        "name": "path_size",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "namespace path (excluding root id)",
        "disposition": "array",
        "name": "path",
        "size": "path_size",
        "type": "NamespaceId"
      },
      {
        "comments": "namespace alias",
        "name": "alias",
        "type": "NamespaceAlias"
      }
    ],
    "name": "NamespacePath",
    "type": "struct"
  },
  {
    "comments": "binary layout for non-historical root namespace history",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "id of the root namespace history",
        "name": "id",
        "type": "NamespaceId"
      },
      {
        "comments": "namespace owner address",
        "name": "owner_address",
        "type": "Address"
      },
      {
        "comments": "lifetime in blocks",
        "name": "lifetime",
        "type": "NamespaceLifetime"
      },
      {
        "comments": "root namespace alias",
        "name": "root_alias",
        "type": "NamespaceAlias"
      },
      {
        "comments": "number of children",
        "name": "children_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "save child sub-namespace paths",
        "disposition": "array",
        "name": "paths",
        "size": "children_count",
        "sort_key": "path",
        "type": "NamespacePath"
      }
    ],
    "name": "RootNamespaceHistory",
    "type": "struct"
  },
  {
    "comments": "Enumeration of account restriction flags.",
    "is_bitwise": true,
    "name": "AccountRestrictionFlags",
    "signedness": "unsigned",
    "size": 2,
    "type": "enum",
    "values": [
      {
        "comments": "Restriction type is an address.",
        "name": "ADDRESS",
        "value": 1
      },
      {
        "comments": "Restriction type is a mosaic identifier.",
        "name": "MOSAIC_ID",
        "value": 2
      },
      {
        "comments": "Restriction type is a transaction type.",
        "name": "TRANSACTION_TYPE",
        "value": 4
      },
      {
        "comments": "Restriction is interpreted as outgoing.",
        "name": "OUTGOING",
        "value": 16384
      },
      {
        "comments": "Restriction is interpreted as blocking (instead of allowing) operation.",
        "name": "BLOCK",
        "value": 32768
      }
    ]
  },
  {
    "comments": "binary layout for address based account restriction",
    "layout": [
      {
        "comments": "number of restrictions for a particular account",
        "name": "restriction_values_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "restriction values",
        "disposition": "array",
        "name": "restriction_values",
        "size": "restriction_values_count",
        "type": "Address"
      }
    ],
    "name": "AccountRestrictionAddressValue",
    "type": "struct"
  },
  {
    "comments": "binary layout for mosaic id based account restriction",
    "layout": [
      {
        "comments": "number of restrictions for a particular account",
        "name": "restriction_values_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "restriction values",
        "disposition": "array",
        "name": "restriction_values",
        "size": "restriction_values_count",
        "type": "MosaicId"
      }
    ],
    "name": "AccountRestrictionMosaicValue",
    "type": "struct"
  },
  {
    "comments": "binary layout for transaction type based account restriction",
    "layout": [
      {
        "comments": "number of restrictions for a particular account",
        "name": "restriction_values_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "restriction values",
        "disposition": "array",
        "name": "restriction_values",
        "size": "restriction_values_count",
        "type": "TransactionType"
      }
    ],
    "name": "AccountRestrictionTransactionTypeValue",
    "type": "struct"
  },
  {
    "comments": "binary layout for account restrictions",
    "layout": [
      {
        "comments": "raw restriction flags",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "address restrictions",
        "condition": "restriction_flags",
        "condition_operation": "in",
        "condition_value": "ADDRESS",
        "name": "address_restrictions",
        "type": "AccountRestrictionAddressValue"
      },
      {
        "comments": "mosaic identifier restrictions",
        "condition": "restriction_flags",
        "condition_operation": "in",
        "condition_value": "MOSAIC_ID",
        "name": "mosaic_id_restrictions",
        "type": "AccountRestrictionMosaicValue"
      },
      {
        "comments": "transaction type restrictions",
        "condition": "restriction_flags",
        "condition_operation": "in",
        "condition_value": "TRANSACTION_TYPE",
        "name": "transaction_type_restrictions",
        "type": "AccountRestrictionTransactionTypeValue"
      }
    ],
    "name": "AccountRestrictionsInfo",
    "type": "struct"
  },
  {
    "comments": "binary layout for account restrictions",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "address on which restrictions are placed",
        "name": "address",
        "type": "Address"
      },
      {
        "comments": "number of restrictions",
        "name": "restrictions_count",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "account restrictions",
        "disposition": "array",
        "name": "restrictions",
        "size": "restrictions_count",
        "type": "AccountRestrictionsInfo"
      }
    ],
    "name": "AccountRestrictions",
    "type": "struct"
  },
  {
    "name": "MosaicRestrictionKey",
    "signedness": "unsigned",
    "size": 8,
    "type": "byte"
  },
  {
    "comments": "Enumeration of mosaic restriction types.",
    "name": "MosaicRestrictionType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Uninitialized value indicating no restriction.",
        "name": "NONE",
        "value": 0
      },
      {
        "comments": "Allow if equal.",
        "name": "EQ",
        "value": 1
      },
      {
        "comments": "Allow if not equal.",
        "name": "NE",
        "value": 2
      },
      {
        "comments": "Allow if less than.",
        "name": "LT",
        "value": 3
      },
      {
        "comments": "Allow if less than or equal.",
        "name": "LE",
        "value": 4
      },
      {
        "comments": "Allow if greater than.",
        "name": "GT",
        "value": 5
      },
      {
        "comments": "Allow if greater than or equal.",
        "name": "GE",
        "value": 6
      }
    ]
  },
  {
    "comments": "type of mosaic restriction entry",
    "name": "MosaicRestrictionEntryType",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "address restriction",
        "name": "ADDRESS",
        "value": 0
      },
      {
        "comments": "global (mosaic) restriction",
        "name": "GLOBAL",
        "value": 1
      }
    ]
  },
  {
    "comments": "layout for mosaic address restriction key-value pair",
    "layout": [
      {
        "comments": "key for value",
        "name": "key",
        "type": "MosaicRestrictionKey"
      },
      {
        "comments": "value associated by key",
        "name": "value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      }
    ],
    "name": "AddressKeyValue",
    "type": "struct"
  },
  {
    "comments": "binary layout for mosaic address restriction key-value set",
    "layout": [
      {
        "comments": "number of key value pairs",
        "name": "key_value_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "key value array",
        "disposition": "array",
        "name": "keys",
        "size": "key_value_count",
        "sort_key": "key",
        "type": "AddressKeyValue"
      }
    ],
    "name": "AddressKeyValueSet",
    "type": "struct"
  },
  {
    "comments": "binary layout of restriction rule being applied",
    "layout": [
      {
        "comments": "identifier of the mosaic providing the restriction key",
        "name": "reference_mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "restriction value",
        "name": "restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "restriction type",
        "name": "restriction_type",
        "type": "MosaicRestrictionType"
      }
    ],
    "name": "RestrictionRule",
    "type": "struct"
  },
  {
    "comments": "binary layout for a global key-value",
    "layout": [
      {
        "comments": "key associated with a restriction rule",
        "name": "key",
        "type": "MosaicRestrictionKey"
      },
      {
        "comments": "restriction rule (the value) associated with a key",
        "name": "restriction_rule",
        "type": "RestrictionRule"
      }
    ],
    "name": "GlobalKeyValue",
    "type": "struct"
  },
  {
    "comments": "binary layout for a global restriction key-value set",
    "layout": [
      {
        "comments": "number of key value pairs",
        "name": "key_value_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "key value array",
        "disposition": "array",
        "name": "keys",
        "size": "key_value_count",
        "sort_key": "key",
        "type": "GlobalKeyValue"
      }
    ],
    "name": "GlobalKeyValueSet",
    "type": "struct"
  },
  {
    "comments": "binary layout for a mosaic restriction",
    "layout": [
      {
        "comments": "identifier of the mosaic to which the restriction applies",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "address being restricted",
        "name": "address",
        "type": "Address"
      },
      {
        "comments": "address key value restriction set",
        "name": "key_pairs",
        "type": "AddressKeyValueSet"
      }
    ],
    "name": "MosaicAddressRestrictionEntry",
    "type": "struct"
  },
  {
    "comments": "binary layout for a mosaic restriction",
    "layout": [
      {
        "comments": "identifier of the mosaic to which the restriction applies",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "global key value restriction set",
        "name": "key_pairs",
        "type": "GlobalKeyValueSet"
      }
    ],
    "name": "MosaicGlobalRestrictionEntry",
    "type": "struct"
  },
  {
    "comments": "binary layout for a mosaic restriction",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "type of restriction being placed upon the entity",
        "name": "entry_type",
        "type": "MosaicRestrictionEntryType"
      },
      {
        "comments": "address restriction rule",
        "condition": "entry_type",
        "condition_operation": "equals",
        "condition_value": "ADDRESS",
        "name": "address_entry",
        "type": "MosaicAddressRestrictionEntry"
      },
      {
        "comments": "global mosaic rule",
        "condition": "entry_type",
        "condition_operation": "equals",
        "condition_value": "GLOBAL",
        "name": "global_entry",
        "type": "MosaicGlobalRestrictionEntry"
      }
    ],
    "name": "MosaicRestrictionEntry",
    "type": "struct"
  },
  {
    "comments": "Enumeration of lock hash algorithms.",
    "name": "LockHashAlgorithm",
    "signedness": "unsigned",
    "size": 1,
    "type": "enum",
    "values": [
      {
        "comments": "Input is hashed using [SHA-3 256](https://en.wikipedia.org/wiki/SHA-3).",
        "name": "SHA3_256",
        "value": 0
      },
      {
        "comments": "Input is hashed twice: first with [SHA-256](https://en.wikipedia.org/wiki/SHA-2) and then with [RIPEMD-160](https://en.wikipedia.org/wiki/RIPEMD) (bitcoin's OP_HASH160).",
        "name": "HASH_160",
        "value": 1
      },
      {
        "comments": "Input is hashed twice with [SHA-256](https://en.wikipedia.org/wiki/SHA-2) (bitcoin's OP_HASH256).",
        "name": "HASH_256",
        "value": 2
      }
    ]
  },
  {
    "comments": "binary layout for serialized lock transaction",
    "layout": [
      {
        "comments": "serialization version",
        "name": "version",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "owner address",
        "name": "owner_address",
        "type": "Address"
      },
      {
        "comments": "mosaic associated with lock",
        "name": "mosaic",
        "type": "Mosaic"
      },
      {
        "comments": "height at which the lock expires",
        "name": "end_height",
        "type": "Height"
      },
      {
        "comments": "flag indicating whether or not the lock was already used",
        "name": "status",
        "type": "LockStatus"
      },
      {
        "comments": "hash algorithm",
        "name": "hash_algorithm",
        "type": "LockHashAlgorithm"
      },
      {
        "comments": "transaction secret",
        "name": "secret",
        "type": "Hash256"
      },
      {
        "comments": "transaction recipient",
        "name": "recipient",
        "type": "Address"
      }
    ],
    "name": "SecretLockInfo",
    "type": "struct"
  },
  {
    "comments": "This transaction is required for all accounts wanting to activate remote or delegated harvesting (V1, latest).\nAnnounce an AccountKeyLinkTransaction to delegate the account importance score to a proxy account.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Linked public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "AccountKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AccountKeyLinkTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Linked public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "EmbeddedAccountKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "This transaction is required for all accounts willing to activate delegated harvesting (V1, latest).\nAnnounce a NodeKeyLinkTransaction to link an account with a public key used by TLS to create sessions.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NODE_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Linked public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "NodeKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of NodeKeyLinkTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NODE_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Linked public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "EmbeddedNodeKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Cosignature attached to an AggregateCompleteTransaction or AggregateBondedTransaction.",
    "is_aligned": true,
    "layout": [
      {
        "comments": "Version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Cosigner public key.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Transaction signature.",
        "name": "signature",
        "type": "Signature"
      }
    ],
    "name": "Cosignature",
    "type": "struct"
  },
  {
    "comments": "Cosignature detached from an AggregateCompleteTransaction or AggregateBondedTransaction.",
    "is_aligned": true,
    "layout": [
      {
        "comments": "Version.",
        "name": "version",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Cosigner public key.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Transaction signature.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Hash of the AggregateBondedTransaction that is signed by this cosignature.",
        "name": "parent_hash",
        "type": "Hash256"
      }
    ],
    "name": "DetachedCosignature",
    "type": "struct"
  },
  {
    "comments": "Send transactions in batches to different accounts (V1, deprecated).\nUse this transaction when all required signatures are available when the transaction is created.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "AGGREGATE_COMPLETE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Hash of the aggregate's transaction.",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "Transaction payload size in bytes.\nThis is the total number of bytes occupied by all embedded transactions, including any padding present.",
        "name": "payload_size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align end of AggregateTransactionHeader to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "aggregate_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "alignment": 8,
        "comments": "Embedded transaction data.\nTransactions are variable-sized and the total payload size is in bytes.\nEmbedded transactions cannot be aggregates.",
        "disposition": "array sized",
        "is_last_element_padded": true,
        "name": "transactions",
        "size": "payload_size",
        "type": "EmbeddedTransaction"
      },
      {
        "comments": "Cosignatures data.\nFills up remaining body space after transactions.",
        "disposition": "array fill",
        "name": "cosignatures",
        "size": 0,
        "type": "Cosignature"
      }
    ],
    "name": "AggregateCompleteTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Send transactions in batches to different accounts (V2, latest).\nUse this transaction when all required signatures are available when the transaction is created.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 2
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "AGGREGATE_COMPLETE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Hash of the aggregate's transaction.",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "Transaction payload size in bytes.\nThis is the total number of bytes occupied by all embedded transactions, including any padding present.",
        "name": "payload_size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align end of AggregateTransactionHeader to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "aggregate_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "alignment": 8,
        "comments": "Embedded transaction data.\nTransactions are variable-sized and the total payload size is in bytes.\nEmbedded transactions cannot be aggregates.",
        "disposition": "array sized",
        "is_last_element_padded": true,
        "name": "transactions",
        "size": "payload_size",
        "type": "EmbeddedTransaction"
      },
      {
        "comments": "Cosignatures data.\nFills up remaining body space after transactions.",
        "disposition": "array fill",
        "name": "cosignatures",
        "size": 0,
        "type": "Cosignature"
      }
    ],
    "name": "AggregateCompleteTransactionV2",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Propose an arrangement of transactions between different accounts (V1, deprecated).\nUse this transaction when not all required signatures are available when the transaction is created.\nMissing signatures must be provided using a Cosignature or DetachedCosignature.\nTo prevent spam attacks, before trying to announce this transaction a HashLockTransaction must be successfully announced and confirmed.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "AGGREGATE_BONDED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Hash of the aggregate's transaction.",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "Transaction payload size in bytes.\nThis is the total number of bytes occupied by all embedded transactions, including any padding present.",
        "name": "payload_size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align end of AggregateTransactionHeader to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "aggregate_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "alignment": 8,
        "comments": "Embedded transaction data.\nTransactions are variable-sized and the total payload size is in bytes.\nEmbedded transactions cannot be aggregates.",
        "disposition": "array sized",
        "is_last_element_padded": true,
        "name": "transactions",
        "size": "payload_size",
        "type": "EmbeddedTransaction"
      },
      {
        "comments": "Cosignatures data.\nFills up remaining body space after transactions.",
        "disposition": "array fill",
        "name": "cosignatures",
        "size": 0,
        "type": "Cosignature"
      }
    ],
    "name": "AggregateBondedTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Propose an arrangement of transactions between different accounts (V2, latest).\nUse this transaction when not all required signatures are available when the transaction is created.\nMissing signatures must be provided using a Cosignature or DetachedCosignature.\nTo prevent spam attacks, before trying to announce this transaction a HashLockTransaction must be successfully announced and confirmed.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 2
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "AGGREGATE_BONDED"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Hash of the aggregate's transaction.",
        "name": "transactions_hash",
        "type": "Hash256"
      },
      {
        "comments": "Transaction payload size in bytes.\nThis is the total number of bytes occupied by all embedded transactions, including any padding present.",
        "name": "payload_size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align end of AggregateTransactionHeader to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "aggregate_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "alignment": 8,
        "comments": "Embedded transaction data.\nTransactions are variable-sized and the total payload size is in bytes.\nEmbedded transactions cannot be aggregates.",
        "disposition": "array sized",
        "is_last_element_padded": true,
        "name": "transactions",
        "size": "payload_size",
        "type": "EmbeddedTransaction"
      },
      {
        "comments": "Cosignatures data.\nFills up remaining body space after transactions.",
        "disposition": "array fill",
        "name": "cosignatures",
        "size": 0,
        "type": "Cosignature"
      }
    ],
    "name": "AggregateBondedTransactionV2",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Link an account with a public key required for finalization voting (V1, latest).\nThis transaction is required for node operators wanting to vote for [finalization](/concepts/block.html#finalization).\nAnnounce a VotingKeyLinkTransaction to associate a voting key with an account during a fixed period. An account can be linked to up to **3** different voting keys at the same time.\nThe recommended production setting is to always have at least **2** linked keys with different ``endPoint`` values to ensure a key is registered after the first one expires.\nSee more details in [the manual node setup guide](/guides/network/running-a-symbol-node-manually.html#manual-voting-key-renewal).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "VOTING_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Linked voting public key.",
        "name": "linked_public_key",
        "type": "VotingPublicKey"
      },
      {
        "comments": "Starting finalization epoch.",
        "name": "start_epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "Ending finalization epoch.",
        "name": "end_epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "VotingKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of VotingKeyLinkTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "VOTING_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Linked voting public key.",
        "name": "linked_public_key",
        "type": "VotingPublicKey"
      },
      {
        "comments": "Starting finalization epoch.",
        "name": "start_epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "Ending finalization epoch.",
        "name": "end_epoch",
        "type": "FinalizationEpoch"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "EmbeddedVotingKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Link an account with a VRF public key required for harvesting (V1, latest).\nAnnounce a VrfKeyLinkTransaction to link an account with a VRF public key. The linked key is used to randomize block production and leader/participant selection.\nThis transaction is required for all accounts wishing to [harvest](/concepts/harvesting.html).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "VRF_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Linked VRF public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "VrfKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of VrfKeyLinkTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "VRF_KEY_LINK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Linked VRF public key.",
        "name": "linked_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Account link action.",
        "name": "link_action",
        "type": "LinkAction"
      }
    ],
    "name": "EmbeddedVrfKeyLinkTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Lock a deposit needed to announce an AggregateBondedTransaction (V1, latest).\nAn AggregateBondedTransaction consumes network resources as it is stored in every node's partial cache while it waits to be fully signed. To avoid spam attacks a HashLockTransaction must be announced and confirmed before an AggregateBondedTransaction can be announced. The HashLockTransaction locks a certain amount of funds (**10** XYM by default) until the aggregate is signed.\nUpon completion of the aggregate, the locked funds become available again to the account that signed the HashLockTransaction.\nIf the lock expires before the aggregate is signed by all cosignatories (**48h by default), the locked funds become a reward collected by the block harvester at the height where the lock expires.\n\\note It is not necessary to sign the aggregate and its HashLockTransaction with the same account. For example, if Bob wants to announce an aggregate and does not have enough funds to announce a HashLockTransaction, he can ask Alice to announce the lock transaction for him by sharing the signed AggregateTransaction hash.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "HASH_LOCK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Locked mosaic.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "Number of blocks for which a lock should be valid.\nThe default maximum is 48h (See the `maxHashLockDuration` network property).",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Hash of the AggregateBondedTransaction to be confirmed before unlocking the mosaics.",
        "name": "hash",
        "type": "Hash256"
      }
    ],
    "name": "HashLockTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of HashLockTransaction.",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "HASH_LOCK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Locked mosaic.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "Number of blocks for which a lock should be valid.\nThe default maximum is 48h (See the `maxHashLockDuration` network property).",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Hash of the AggregateBondedTransaction to be confirmed before unlocking the mosaics.",
        "name": "hash",
        "type": "Hash256"
      }
    ],
    "name": "EmbeddedHashLockTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Start a token swap between different chains (V1, latest).\nUse a SecretLockTransaction to transfer mosaics between two accounts. The mosaics sent remain locked until a valid SecretProofTransaction unlocks them.\nThe default expiration date is **365 days** after announcement (See the `maxSecretLockDuration` network property). If the lock expires before a valid SecretProofTransaction is announced the locked amount goes back to the initiator of the SecretLockTransaction.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "SECRET_LOCK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Address that receives the funds once successfully unlocked by a SecretProofTransaction.",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Hashed proof.",
        "name": "secret",
        "type": "Hash256"
      },
      {
        "comments": "Locked mosaics.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "Number of blocks to wait for the SecretProofTransaction.",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Algorithm used to hash the proof.",
        "name": "hash_algorithm",
        "type": "LockHashAlgorithm"
      }
    ],
    "name": "SecretLockTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of SecretLockTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "SECRET_LOCK"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Address that receives the funds once successfully unlocked by a SecretProofTransaction.",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Hashed proof.",
        "name": "secret",
        "type": "Hash256"
      },
      {
        "comments": "Locked mosaics.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "Number of blocks to wait for the SecretProofTransaction.",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Algorithm used to hash the proof.",
        "name": "hash_algorithm",
        "type": "LockHashAlgorithm"
      }
    ],
    "name": "EmbeddedSecretLockTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Conclude a token swap between different chains (V1, latest).\nUse a SecretProofTransaction to unlock the funds locked by a SecretLockTransaction.\nThe transaction must prove knowing the *proof* that unlocks the mosaics.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "SECRET_PROOF"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Address that receives the funds once unlocked.",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Hashed proof.",
        "name": "secret",
        "type": "Hash256"
      },
      {
        "comments": "Proof size in bytes",
        "name": "proof_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Algorithm used to hash the proof.",
        "name": "hash_algorithm",
        "type": "LockHashAlgorithm"
      },
      {
        "comments": "Original random set of bytes that were hashed.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "proof",
        "size": "proof_size",
        "type": "byte"
      }
    ],
    "name": "SecretProofTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of SecretProofTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "SECRET_PROOF"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Address that receives the funds once unlocked.",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Hashed proof.",
        "name": "secret",
        "type": "Hash256"
      },
      {
        "comments": "Proof size in bytes",
        "name": "proof_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Algorithm used to hash the proof.",
        "name": "hash_algorithm",
        "type": "LockHashAlgorithm"
      },
      {
        "comments": "Original random set of bytes that were hashed.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "proof",
        "size": "proof_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedSecretProofTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Associate a key-value state ([metadata](/concepts/metadata.html)) to an **account** (V1, latest).\n\\note This transaction must **always** be wrapped in an AggregateTransaction so that a cosignature from `target_address` can be provided. Without this cosignature the transaction is invalid.\nCompare to MosaicMetadataTransaction and NamespaceMetadataTransaction.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Account whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "AccountMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AccountMetadataTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Account whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedAccountMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Associate a key-value state ([metadata](/concepts/metadata.html)) to a **mosaic** (V1, latest).\nCompare to AccountMetadataTransaction and NamespaceMetadataTransaction.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Account owning the mosaic whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Mosaic whose metadata should be modified.",
        "name": "target_mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "MosaicMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicMetadataTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Account owning the mosaic whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Mosaic whose metadata should be modified.",
        "name": "target_mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedMosaicMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Associate a key-value state ([metadata](/concepts/metadata.html)) to a **namespace** (V1, latest).\nCompare to AccountMetadataTransaction and MosaicMetadataTransaction.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NAMESPACE_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Account owning the namespace whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Namespace whose metadata should be modified.",
        "name": "target_namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "NamespaceMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of NamespaceMetadataTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NAMESPACE_METADATA"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Account owning the namespace whose metadata should be modified.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Metadata key scoped to source, target and type.",
        "name": "scoped_metadata_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Namespace whose metadata should be modified.",
        "name": "target_namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Change in value size in bytes, compared to previous size.",
        "name": "value_size_delta",
        "signedness": "signed",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Size in bytes of the `value` array.",
        "name": "value_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "Difference between existing value and new value. \\note When there is no existing value, this array is directly used and `value_size_delta`==`value_size`. \\note When there is an existing value, the new value is the byte-wise XOR of the previous value and this array.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "value",
        "size": "value_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedNamespaceMetadataTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Create a new  [mosaic](/concepts/mosaic.html) (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_DEFINITION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Unique mosaic identifier obtained from the generator account's public key and the `nonce`.\nThe SDK's can take care of generating this ID for you.",
        "name": "id",
        "type": "MosaicId"
      },
      {
        "comments": "Mosaic duration expressed in blocks. If set to 0, the mosaic never expires.",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Random nonce used to generate the mosaic id.",
        "name": "nonce",
        "type": "MosaicNonce"
      },
      {
        "comments": "Mosaic flags.",
        "name": "flags",
        "type": "MosaicFlags"
      },
      {
        "comments": "Mosaic divisibility.",
        "name": "divisibility",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      }
    ],
    "name": "MosaicDefinitionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicDefinitionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_DEFINITION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Unique mosaic identifier obtained from the generator account's public key and the `nonce`.\nThe SDK's can take care of generating this ID for you.",
        "name": "id",
        "type": "MosaicId"
      },
      {
        "comments": "Mosaic duration expressed in blocks. If set to 0, the mosaic never expires.",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Random nonce used to generate the mosaic id.",
        "name": "nonce",
        "type": "MosaicNonce"
      },
      {
        "comments": "Mosaic flags.",
        "name": "flags",
        "type": "MosaicFlags"
      },
      {
        "comments": "Mosaic divisibility.",
        "name": "divisibility",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      }
    ],
    "name": "EmbeddedMosaicDefinitionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Change the total supply of a mosaic (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_SUPPLY_CHANGE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Affected mosaic identifier.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Change amount. It cannot be negative, use the `action` field to indicate if this amount should be **added** or **subtracted** from the current supply.",
        "name": "delta",
        "type": "Amount"
      },
      {
        "comments": "Supply change action.",
        "name": "action",
        "type": "MosaicSupplyChangeAction"
      }
    ],
    "name": "MosaicSupplyChangeTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicSupplyChangeTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_SUPPLY_CHANGE"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Affected mosaic identifier.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Change amount. It cannot be negative, use the `action` field to indicate if this amount should be **added** or **subtracted** from the current supply.",
        "name": "delta",
        "type": "Amount"
      },
      {
        "comments": "Supply change action.",
        "name": "action",
        "type": "MosaicSupplyChangeAction"
      }
    ],
    "name": "EmbeddedMosaicSupplyChangeTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Revoke mosaic (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_SUPPLY_REVOCATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Address from which tokens should be revoked.",
        "name": "source_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Revoked mosaic and amount.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      }
    ],
    "name": "MosaicSupplyRevocationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicSupplyRevocationTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_SUPPLY_REVOCATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Address from which tokens should be revoked.",
        "name": "source_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Revoked mosaic and amount.",
        "name": "mosaic",
        "type": "UnresolvedMosaic"
      }
    ],
    "name": "EmbeddedMosaicSupplyRevocationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Create or modify a [multi-signature](/concepts/multisig-account.html) account (V1, latest).\nThis transaction allows you to: - Transform a regular account into a multisig account. - Change the configurable properties of a multisig account. - Add or delete cosignatories from a multisig account (removing all cosignatories turns a multisig account into a regular account again).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MULTISIG_ACCOUNT_MODIFICATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Relative change to the **minimum** number of cosignatures required when **removing a cosignatory**.\nE.g., when moving from 0 to 2 cosignatures this number would be **2**. When moving from 4 to 3 cosignatures, the number would be **-1**.",
        "name": "min_removal_delta",
        "signedness": "signed",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Relative change to the **minimum** number of cosignatures required when **approving a transaction**.\nE.g., when moving from 0 to 2 cosignatures this number would be **2**. When moving from 4 to 3 cosignatures, the number would be **-1**.",
        "name": "min_approval_delta",
        "signedness": "signed",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of cosignatory address additions.",
        "name": "address_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of cosignatory address deletions.",
        "name": "address_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align addressAdditions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "multisig_account_modification_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Cosignatory address additions.\nAll accounts in this list will be able to cosign transactions on behalf of the multisig account. The number of required cosignatures depends on the configured minimum approval and minimum removal values.",
        "disposition": "array",
        "name": "address_additions",
        "size": "address_additions_count",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Cosignatory address deletions.\nAll accounts in this list will stop being able to cosign transactions on behalf of the multisig account. A transaction containing **any** address in this array requires a number of cosignatures at least equal to the minimum removal value.",
        "disposition": "array",
        "name": "address_deletions",
        "size": "address_deletions_count",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "MultisigAccountModificationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MultisigAccountModificationTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MULTISIG_ACCOUNT_MODIFICATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Relative change to the **minimum** number of cosignatures required when **removing a cosignatory**.\nE.g., when moving from 0 to 2 cosignatures this number would be **2**. When moving from 4 to 3 cosignatures, the number would be **-1**.",
        "name": "min_removal_delta",
        "signedness": "signed",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Relative change to the **minimum** number of cosignatures required when **approving a transaction**.\nE.g., when moving from 0 to 2 cosignatures this number would be **2**. When moving from 4 to 3 cosignatures, the number would be **-1**.",
        "name": "min_approval_delta",
        "signedness": "signed",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of cosignatory address additions.",
        "name": "address_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of cosignatory address deletions.",
        "name": "address_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align addressAdditions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "multisig_account_modification_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Cosignatory address additions.\nAll accounts in this list will be able to cosign transactions on behalf of the multisig account. The number of required cosignatures depends on the configured minimum approval and minimum removal values.",
        "disposition": "array",
        "name": "address_additions",
        "size": "address_additions_count",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Cosignatory address deletions.\nAll accounts in this list will stop being able to cosign transactions on behalf of the multisig account. A transaction containing **any** address in this array requires a number of cosignatures at least equal to the minimum removal value.",
        "disposition": "array",
        "name": "address_deletions",
        "size": "address_deletions_count",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "EmbeddedMultisigAccountModificationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Attach or detach a [namespace](/concepts/namespace.html) (alias) to an account address (V1, latest).\nA namespace can be assigned to any account present in the network (this is, an account which has received at least one transaction).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ADDRESS_ALIAS"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Identifier of the namespace that will become (or stop being) an alias for the address.",
        "name": "namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Aliased address.",
        "name": "address",
        "type": "Address"
      },
      {
        "comments": "Alias action.",
        "name": "alias_action",
        "type": "AliasAction"
      }
    ],
    "name": "AddressAliasTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AddressAliasTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ADDRESS_ALIAS"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Identifier of the namespace that will become (or stop being) an alias for the address.",
        "name": "namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Aliased address.",
        "name": "address",
        "type": "Address"
      },
      {
        "comments": "Alias action.",
        "name": "alias_action",
        "type": "AliasAction"
      }
    ],
    "name": "EmbeddedAddressAliasTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Attach or detach a [namespace](/concepts/namespace.html) to a Mosaic.(V1, latest)\nSetting an alias to a mosaic is only possible if the account announcing this transaction has also created the namespace and the mosaic involved.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_ALIAS"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Identifier of the namespace that will become (or stop being) an alias for the Mosaic.",
        "name": "namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Aliased mosaic identifier.",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "Alias action.",
        "name": "alias_action",
        "type": "AliasAction"
      }
    ],
    "name": "MosaicAliasTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicAliasTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_ALIAS"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Identifier of the namespace that will become (or stop being) an alias for the Mosaic.",
        "name": "namespace_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Aliased mosaic identifier.",
        "name": "mosaic_id",
        "type": "MosaicId"
      },
      {
        "comments": "Alias action.",
        "name": "alias_action",
        "type": "AliasAction"
      }
    ],
    "name": "EmbeddedMosaicAliasTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Register (or renew a registration for) a [namespace](/concepts/namespace.html) (V1, latest).\nNamespaces help keep assets organized.",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NAMESPACE_REGISTRATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Number of confirmed blocks you would like to rent the namespace for. Required for root namespaces.",
        "condition": "registration_type",
        "condition_operation": "equals",
        "condition_value": "ROOT",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Parent namespace identifier. Required for sub-namespaces.",
        "condition": "registration_type",
        "condition_operation": "equals",
        "condition_value": "CHILD",
        "name": "parent_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Namespace identifier.",
        "name": "id",
        "type": "NamespaceId"
      },
      {
        "comments": "Namespace registration type.",
        "name": "registration_type",
        "type": "NamespaceRegistrationType"
      },
      {
        "comments": "Namespace name size in bytes.",
        "name": "name_size",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Namespace name.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "name",
        "size": "name_size",
        "type": "byte"
      }
    ],
    "name": "NamespaceRegistrationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of NamespaceRegistrationTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "NAMESPACE_REGISTRATION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Number of confirmed blocks you would like to rent the namespace for. Required for root namespaces.",
        "condition": "registration_type",
        "condition_operation": "equals",
        "condition_value": "ROOT",
        "name": "duration",
        "type": "BlockDuration"
      },
      {
        "comments": "Parent namespace identifier. Required for sub-namespaces.",
        "condition": "registration_type",
        "condition_operation": "equals",
        "condition_value": "CHILD",
        "name": "parent_id",
        "type": "NamespaceId"
      },
      {
        "comments": "Namespace identifier.",
        "name": "id",
        "type": "NamespaceId"
      },
      {
        "comments": "Namespace registration type.",
        "name": "registration_type",
        "type": "NamespaceRegistrationType"
      },
      {
        "comments": "Namespace name size in bytes.",
        "name": "name_size",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Namespace name.",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "name",
        "size": "name_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedNamespaceRegistrationTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Allow or block incoming and outgoing transactions for a given a set of addresses (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_ADDRESS_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Type of restriction being applied to the listed addresses.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of addresses being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of addresses being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of account addresses being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Array of account addresses being removed from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "AccountAddressRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AccountAddressRestrictionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_ADDRESS_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Type of restriction being applied to the listed addresses.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of addresses being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of addresses being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of account addresses being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "Array of account addresses being removed from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "EmbeddedAccountAddressRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Allow or block incoming transactions containing a given set of mosaics (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_MOSAIC_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Type of restriction being applied to the listed mosaics.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of mosaics being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of mosaics being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of mosaics being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Array of mosaics being removed from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "UnresolvedMosaicId"
      }
    ],
    "name": "AccountMosaicRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AccountMosaicRestrictionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_MOSAIC_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Type of restriction being applied to the listed mosaics.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of mosaics being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of mosaics being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of mosaics being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Array of mosaics being removed from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "UnresolvedMosaicId"
      }
    ],
    "name": "EmbeddedAccountMosaicRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Allow or block outgoing transactions depending on their transaction type (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_OPERATION_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Type of restriction being applied to the listed transaction types.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of transaction types being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of transaction types being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of transaction types being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "TransactionType"
      },
      {
        "comments": "Array of transaction types being rtemoved from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "TransactionType"
      }
    ],
    "name": "AccountOperationRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of AccountOperationRestrictionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "ACCOUNT_OPERATION_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Type of restriction being applied to the listed transaction types.",
        "name": "restriction_flags",
        "type": "AccountRestrictionFlags"
      },
      {
        "comments": "Number of transaction types being added.",
        "name": "restriction_additions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Number of transaction types being removed.",
        "name": "restriction_deletions_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align restriction_additions to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "account_restriction_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Array of transaction types being added to the restricted list.",
        "disposition": "array",
        "name": "restriction_additions",
        "size": "restriction_additions_count",
        "type": "TransactionType"
      },
      {
        "comments": "Array of transaction types being rtemoved from the restricted list.",
        "disposition": "array",
        "name": "restriction_deletions",
        "size": "restriction_deletions_count",
        "type": "TransactionType"
      }
    ],
    "name": "EmbeddedAccountOperationRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Set address specific rules to transfer a restrictable mosaic (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_ADDRESS_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Identifier of the mosaic to which the restriction applies.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Restriction key.",
        "name": "restriction_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction value. Set `previousRestrictionValue` to `FFFFFFFFFFFFFFFF` if the target address does not have a previous restriction value for this mosaic id and restriction key.",
        "name": "previous_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "New restriction value.",
        "name": "new_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Address being restricted.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "MosaicAddressRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicAddressRestrictionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_ADDRESS_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Identifier of the mosaic to which the restriction applies.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Restriction key.",
        "name": "restriction_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction value. Set `previousRestrictionValue` to `FFFFFFFFFFFFFFFF` if the target address does not have a previous restriction value for this mosaic id and restriction key.",
        "name": "previous_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "New restriction value.",
        "name": "new_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Address being restricted.",
        "name": "target_address",
        "type": "UnresolvedAddress"
      }
    ],
    "name": "EmbeddedMosaicAddressRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Set global rules to transfer a restrictable mosaic (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_GLOBAL_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "Identifier of the mosaic being restricted. The mosaic creator must be the signer of the transaction.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Identifier of the mosaic providing the restriction key. The mosaic global restriction for the mosaic identifier depends on global restrictions set on the reference mosaic. Set `reference_mosaic_id` to **0** if the mosaic giving the restriction equals the `mosaic_id`.",
        "name": "reference_mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Restriction key relative to the reference mosaic identifier.",
        "name": "restriction_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction value.",
        "name": "previous_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "New restriction value.",
        "name": "new_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction type.",
        "name": "previous_restriction_type",
        "type": "MosaicRestrictionType"
      },
      {
        "comments": "New restriction type.",
        "name": "new_restriction_type",
        "type": "MosaicRestrictionType"
      }
    ],
    "name": "MosaicGlobalRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of MosaicGlobalRestrictionTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "MOSAIC_GLOBAL_RESTRICTION"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "Identifier of the mosaic being restricted. The mosaic creator must be the signer of the transaction.",
        "name": "mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Identifier of the mosaic providing the restriction key. The mosaic global restriction for the mosaic identifier depends on global restrictions set on the reference mosaic. Set `reference_mosaic_id` to **0** if the mosaic giving the restriction equals the `mosaic_id`.",
        "name": "reference_mosaic_id",
        "type": "UnresolvedMosaicId"
      },
      {
        "comments": "Restriction key relative to the reference mosaic identifier.",
        "name": "restriction_key",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction value.",
        "name": "previous_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "New restriction value.",
        "name": "new_restriction_value",
        "signedness": "unsigned",
        "size": 8,
        "type": "byte"
      },
      {
        "comments": "Previous restriction type.",
        "name": "previous_restriction_type",
        "type": "MosaicRestrictionType"
      },
      {
        "comments": "New restriction type.",
        "name": "new_restriction_type",
        "type": "MosaicRestrictionType"
      }
    ],
    "name": "EmbeddedMosaicGlobalRestrictionTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Send mosaics and messages between two accounts (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "Transaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "TRANSFER"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "Reserved padding to align Signature to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "verifiable_entity_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Entity's signature generated by the signing account.",
        "name": "signature",
        "type": "Signature"
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "transaction fee",
        "name": "fee",
        "type": "Amount"
      },
      {
        "comments": "transaction deadline",
        "name": "deadline",
        "type": "Timestamp"
      },
      {
        "comments": "recipient address",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "size of attached message",
        "name": "message_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "number of attached mosaics",
        "name": "mosaics_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align mosaics on 8-byte boundary",
        "disposition": "reserved",
        "name": "transfer_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "reserved padding to align mosaics on 8-byte boundary",
        "disposition": "reserved",
        "name": "transfer_transaction_body_reserved_2",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "attached mosaics",
        "disposition": "array",
        "name": "mosaics",
        "size": "mosaics_count",
        "sort_key": "mosaic_id",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "attached message",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "message",
        "size": "message_size",
        "type": "byte"
      }
    ],
    "name": "TransferTransactionV1",
    "size": "size",
    "type": "struct"
  },
  {
    "comments": "Embedded version of TransferTransaction (V1, latest).",
    "discriminator": [
      "type"
    ],
    "factory_type": "EmbeddedTransaction",
    "initializers": [
      {
        "target_property_name": "version",
        "value": "TRANSACTION_VERSION"
      },
      {
        "target_property_name": "type",
        "value": "TRANSACTION_TYPE"
      }
    ],
    "is_aligned": true,
    "layout": [
      {
        "disposition": "const",
        "name": "TRANSACTION_VERSION",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 1
      },
      {
        "disposition": "const",
        "name": "TRANSACTION_TYPE",
        "type": "TransactionType",
        "value": "TRANSFER"
      },
      {
        "comments": "Entity size in bytes.\nThis size includes the header and the full payload of the entity. I.e, the size field matches the size reported in the structure documentation (plus the variable part, if there is any).",
        "name": "size",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align end of EmbeddedTransactionHeader on 8-byte boundary",
        "disposition": "reserved",
        "name": "embedded_transaction_header_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Public key of the signer of the entity.",
        "name": "signer_public_key",
        "type": "PublicKey"
      },
      {
        "comments": "Reserved padding to align end of EntityBody to an 8-byte boundary.",
        "disposition": "reserved",
        "name": "entity_body_reserved_1",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "Version of this structure.",
        "name": "version",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "Network on which this entity was created.",
        "name": "network",
        "type": "NetworkType"
      },
      {
        "comments": "transaction type",
        "name": "type",
        "type": "TransactionType"
      },
      {
        "comments": "recipient address",
        "name": "recipient_address",
        "type": "UnresolvedAddress"
      },
      {
        "comments": "size of attached message",
        "name": "message_size",
        "signedness": "unsigned",
        "size": 2,
        "type": "byte"
      },
      {
        "comments": "number of attached mosaics",
        "name": "mosaics_count",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte"
      },
      {
        "comments": "reserved padding to align mosaics on 8-byte boundary",
        "disposition": "reserved",
        "name": "transfer_transaction_body_reserved_1",
        "signedness": "unsigned",
        "size": 1,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "reserved padding to align mosaics on 8-byte boundary",
        "disposition": "reserved",
        "name": "transfer_transaction_body_reserved_2",
        "signedness": "unsigned",
        "size": 4,
        "type": "byte",
        "value": 0
      },
      {
        "comments": "attached mosaics",
        "disposition": "array",
        "name": "mosaics",
        "size": "mosaics_count",
        "sort_key": "mosaic_id",
        "type": "UnresolvedMosaic"
      },
      {
        "comments": "attached message",
        "disposition": "array",
        "element_disposition": {
          "signedness": "unsigned",
          "size": 1
        },
        "name": "message",
        "size": "message_size",
        "type": "byte"
      }
    ],
    "name": "EmbeddedTransferTransactionV1",
    "size": "size",
    "type": "struct"
  }
]